from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required, user_passes_test

from django.views.generic import CreateView

from django.urls import reverse_lazy
from django.http import HttpResponse
from django.template import context, loader
from django import template
from django.contrib.auth.mixins import LoginRequiredMixin

from .models import Account, Company
from .forms import AccountForm

from django.contrib.auth.models import User

from django.contrib import messages

import pandas as pd

from django.core.files.storage import FileSystemStorage

from django.db.utils import IntegrityError


def is_superuser(user):
    return user.is_superuser

def login(request):
    return render(request, 'login.html')

@login_required
def home(request):
    user = request.user
    
    params = {
        'user' : user
    }
    
    return render(request, 'home.html', params)
    
@login_required
def account_create(request):
    # データベースに Account レコードが存在するかチェック
    if Account.objects.filter(user=request.user).exists():
        # データが登録されている場合、別のページにリダイレクト
        return redirect('/')  # リダイレクト先のURLを設定
    
    form_class = AccountForm
    
    if request.method == 'POST':
        account_form = AccountForm(request.POST)
        
        user = request.user
        
        account = account_form.save(commit=False)
        account.user = user
        
        account.submitted = True  # フォームが提出されたことをマーク
        
         # ここで schoolnumber フィールドに値を設定
        account.schoolnumber = user.username

        account.save()  # データベースに保存

        # messages.success(request, 'アカウント作成が完了しました。')
        return render(request, 'information.html')
    
    else:
        form = AccountForm()
    
    params = {
        'form' : form
    }
    
    return render(request, 'accountcreate.html', params)

@login_required
def information(request):
    
    user = request.user
    
    params = {
        'user' : user
    }

    return render(request, 'information.html', params)

@user_passes_test(is_superuser)
# def upload_excel(request):
#     if request.method == 'POST' and request.FILES['excel_file']:
#         excel_file = request.FILES['excel_file']
#         if excel_file.name.endswith('.xlsx'):
#             df = pd.read_excel(excel_file, skiprows=2)  # 4行目からデータを読み込む

#             for _, row in df.iterrows():
#                 # NaNをNoneに変換するヘルパー関数
#                 def nan_to_none(value):
#                     return None if pd.isna(value) else value
#                 Company.objects.create(
                    
#                     number=row['求人番号'],
#                     name=row['会社名'],
#                     AD=row['AD'],
#                     EE=row['EE'],
#                     ME=row['ME'],
#                     CS=row['CS'],
#                     ALL=row['全'],
#                     AC=row['AC'],
#                     prefecture=row['都道府県'],
#                     address=row['住所'],
#                     tel=row['℡'],
#                     PIC=row['担当'],
#                     workplace=row['勤務地'],
#                     qualified=row['推薦/自由'],
#                     method=row['応募方法'],
#                     selection_day=row['選考日'],
#                     naming=row['呼称'],
#                     money=row['資本金'],
#                     employee=row['従業員(人)'],
#                     type=row['業種'],
#                     detail=row['事業内容'],
#                     occupation=row['職種'],
#                     web=row['ﾎｰﾑﾍﾟｰｼﾞ'],
#                     mail=row['メールアドレス'],
#                     graduated=row['既卒'],
#                     disabled=row['障がい者\n採用'],
#                     PDF=row['PDF'],
#                 )
                
                

#             return redirect('show_excel_data')

#     return render(request, 'upload_excel.html')

@user_passes_test(is_superuser)
def upload_excel(request):
    if request.method == 'POST' and request.FILES['excel_file']:
        excel_file = request.FILES['excel_file']
        fs = FileSystemStorage()
        filename = fs.save(excel_file.name, excel_file)
        file_url = fs.url(filename)

        # データベースにExcelデータを保存するコード
        data = pd.read_excel(excel_file, header=2)  # 3行目をヘッダー行としない

        def nan_to_none(value):
            return None if pd.isna(value) else value

        # データ読み込みの前に空白をNoneに変換
        data['従業員(人)'] = data['従業員(人)'].apply(lambda x: x if x != ' ' else None)

        # データ読み込みの前に空白文字をNoneに変換する関数
        def convert_to_int(value):
            value = str(value)  # 常に文字列に変換
            value = value.strip()  # 前後の空白を削除
            if not value:  # 空文字列の場合、Noneを返す
                return None
            return int(value)

        for index, row in data.iterrows():
            try:
                company = Company(
                    number=convert_to_int(row['求人番号']),
                    name=row['会社名'],
                    AD=convert_to_int(row['AD']),
                    EE=convert_to_int(row['EE']),
                    ME=convert_to_int(row['ME']),
                    CS=convert_to_int(row['CS']),
                    ALL=convert_to_int(row['全']),
                    AC=convert_to_int(row['AC']),
                    prefecture=row['都道府県'],
                    address=row['住所'],
                    tel=convert_to_int(row['℡']),
                    PIC=row['担当'],
                    workplace=row['勤務地'],
                    qualified=row['推薦/自由'],
                    method=row['応募方法'],
                    selection_day=row['選考日'],
                    naming=row['呼称'],
                    money=row['資本金'],
                    employee=convert_to_int(row['従業員(人)']),
                    type=row['業種'],
                    detail=row['事業内容'],
                    occupation=row['職種'],
                    web=row['ﾎｰﾠﾍﾟｰｼﾞ'],
                    mail=row['メールアドレス'],
                    date=row['日付'],
                )
                company.save()
            except (ValueError, IntegrityError):
                # 例外処理: 数値に変換できない場合やデータの保存時に一意制約違反が発生した場合
                # この行のデータが処理できない場合、スキップする
                continue

        return render(request, 'upload_excel.html', {'file_url': file_url})

    return render(request, 'upload_excel.html')

@login_required
def company(request):
    data = Company.objects.all()
    return render(request, 'company.html', {'data': data})  
